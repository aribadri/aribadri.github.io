{
  "version": 3,
  "sources": ["../../three-dracoloader/index.js"],
  "sourcesContent": ["/**\n * @author Rich Tibbett / https://github.com/richtr\n * @author mrdoob / http://mrdoob.com/\n * @author Tony Parisi / http://www.tonyparisi.com/\n * @author Takahiro / https://github.com/takahirox\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\nvar THREE = require( 'three' );\n\nvar DRACOLoader = function ( manager ) {\n\n\tTHREE.Loader.call( this, manager );\n\n\tthis.decoderPath = '';\n\tthis.decoderConfig = {};\n\tthis.decoderBinary = null;\n\tthis.decoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\n\tthis.defaultAttributeIDs = {\n\t\tposition: 'POSITION',\n\t\tnormal: 'NORMAL',\n\t\tcolor: 'COLOR',\n\t\tuv: 'TEX_COORD'\n\t};\n\tthis.defaultAttributeTypes = {\n\t\tposition: 'Float32Array',\n\t\tnormal: 'Float32Array',\n\t\tcolor: 'Float32Array',\n\t\tuv: 'Float32Array'\n\t};\n\n};\n\nDRACOLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\tconstructor: DRACOLoader,\n\n\tsetDecoderPath: function ( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetDecoderConfig: function ( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\t/** @deprecated */\n\tsetVerbosity: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setVerbosity() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetDrawMode: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setDrawMode() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetSkipDequantization: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setSkipDequantization() method has been removed.' );\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tif ( this.crossOrigin === 'use-credentials' ) {\n\n\t\t\tloader.setWithCredentials( true );\n\n\t\t}\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tvar taskConfig = {\n\t\t\t\tattributeIDs: this.defaultAttributeIDs,\n\t\t\t\tattributeTypes: this.defaultAttributeTypes,\n\t\t\t\tuseUniqueIDs: false\n\t\t\t};\n\n\t\t\tthis.decodeGeometry( buffer, taskConfig )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n\tdecodeDracoFile: function ( buffer, callback, attributeIDs, attributeTypes ) {\n\n\t\tvar taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs\n\t\t};\n\n\t\tthis.decodeGeometry( buffer, taskConfig ).then( callback );\n\n\t},\n\n\tdecodeGeometry: function ( buffer, taskConfig ) {\n\n\t\t// TODO: For backward-compatibility, support 'attributeTypes' objects containing\n\t\t// references (rather than names) to typed array constructors. These must be\n\t\t// serialized before sending them to the worker.\n\t\tfor ( var attribute in taskConfig.attributeTypes ) {\n\n\t\t\tvar type = taskConfig.attributeTypes[ attribute ];\n\n\t\t\tif ( type.BYTES_PER_ELEMENT !== undefined ) {\n\n\t\t\t\ttaskConfig.attributeTypes[ attribute ] = type.name;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( DRACOLoader.taskCache.has( buffer ) ) {\n\n\t\t\tvar cachedTask = DRACOLoader.taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar worker;\n\t\tvar taskID = this.workerNextTaskID ++;\n\t\tvar taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tvar geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tgeometryPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\tDRACOLoader.taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t},\n\n\t_createGeometry: function ( geometryData ) {\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new THREE.BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tvar attribute = geometryData.attributes[ i ];\n\t\t\tvar name = attribute.name;\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tgeometry.setAttribute( name, new THREE.BufferAttribute( array, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t},\n\n\t_loadLibrary: function ( url, responseType ) {\n\n\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t},\n\n\tpreload: function () {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t},\n\n\t_initDecoder: function () {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tvar useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tvar librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tvar jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tvar fn = DRACOLoader.DRACOWorker.toString();\n\n\t\t\t\tvar body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t},\n\n\t_getWorker: function ( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\t_releaseTask: function ( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t},\n\n\tdebug: function () {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* WEB WORKER */\n\nDRACOLoader.DRACOWorker = function () {\n\n\tvar decoderConfig;\n\tvar decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig );\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tvar buffer = message.buffer;\n\t\t\t\tvar taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tvar draco = module.draco;\n\t\t\t\t\tvar decoder = new draco.Decoder();\n\t\t\t\t\tvar decoderBuffer = new draco.DecoderBuffer();\n\t\t\t\t\tdecoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );\n\n\t\t\t\t\t\tvar buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoderBuffer );\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {\n\n\t\tvar attributeIDs = taskConfig.attributeIDs;\n\t\tvar attributeTypes = taskConfig.attributeTypes;\n\n\t\tvar dracoGeometry;\n\t\tvar decodingStatus;\n\n\t\tvar geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tvar geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( var attributeName in attributeIDs ) {\n\n\t\t\tvar attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tvar attribute;\n\t\t\tvar attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\t// Generate mesh faces.\n\t\t\tvar numFaces = dracoGeometry.num_faces();\n\t\t\tvar numIndices = numFaces * 3;\n\t\t\tvar index = new Uint32Array( numIndices );\n\t\t\tvar indexArray = new draco.DracoInt32Array();\n\n\t\t\tfor ( var i = 0; i < numFaces; ++ i ) {\n\n\t\t\t\tdecoder.GetFaceFromMesh( dracoGeometry, i, indexArray );\n\n\t\t\t\tfor ( var j = 0; j < 3; ++ j ) {\n\n\t\t\t\t\tindex[ i * 3 + j ] = indexArray.GetValue( j );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.index = { array: index, itemSize: 1 };\n\n\t\t\tdraco.destroy( indexArray );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tvar numComponents = attribute.num_components();\n\t\tvar numPoints = dracoGeometry.num_points();\n\t\tvar numValues = numPoints * numComponents;\n\t\tvar dracoArray;\n\n\t\tvar array;\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array:\n\t\t\t\tdracoArray = new draco.DracoFloat32Array();\n\t\t\t\tdecoder.GetAttributeFloatForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Float32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int8Array:\n\t\t\t\tdracoArray = new draco.DracoInt8Array();\n\t\t\t\tdecoder.GetAttributeInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int8Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int16Array:\n\t\t\t\tdracoArray = new draco.DracoInt16Array();\n\t\t\t\tdecoder.GetAttributeInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int16Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int32Array:\n\t\t\t\tdracoArray = new draco.DracoInt32Array();\n\t\t\t\tdecoder.GetAttributeInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint8Array:\n\t\t\t\tdracoArray = new draco.DracoUInt8Array();\n\t\t\t\tdecoder.GetAttributeUInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint8Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint16Array:\n\t\t\t\tdracoArray = new draco.DracoUInt16Array();\n\t\t\t\tdecoder.GetAttributeUInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint16Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint32Array:\n\t\t\t\tdracoArray = new draco.DracoUInt32Array();\n\t\t\t\tdecoder.GetAttributeUInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected attribute type.' );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < numValues; i ++ ) {\n\n\t\t\tarray[ i ] = dracoArray.GetValue( i );\n\n\t\t}\n\n\t\tdraco.destroy( dracoArray );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n};\n\nDRACOLoader.taskCache = new WeakMap();\n\n/** Deprecated static methods */\n\n/** @deprecated */\nDRACOLoader.setDecoderPath = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.setDecoderConfig = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.releaseDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.getDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\n\nmodule.exports = DRACOLoader;\n"],
  "mappings": "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",
  "names": ["module"]
}
